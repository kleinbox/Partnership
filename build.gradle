import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'fabric-loom' version '1.5-SNAPSHOT'
	id 'maven-publish'
  id "org.jetbrains.kotlin.jvm" version "1.9.22"
}

version = "v$mod_version"
group = maven_group

base {
	archivesName = "${archives_base_name}-fabric-mc${minecraft_version}"
}

repositories {
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

dependencies {
	// Minecraft
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${loader_version}"

	// Fabric APIs
	modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
	modImplementation "net.fabricmc:fabric-language-kotlin:${fabric_kotlin_version}"

	// Other dependencies
	modApi "maven.modrinth:emi:${emi_version}"

	// Optional compatibility
	modApi "maven.modrinth:boatism:${boatism_version}"
		modRuntimeOnly "maven.modrinth:cloth-config:13.0.121+fabric"

	// Dev environment
	modRuntimeOnly "maven.modrinth:sodium:${sodium_version}"
	modRuntimeOnly "maven.modrinth:modmenu:${modmenu_version}"
	modRuntimeOnly "maven.modrinth:emi:${emi_version}"
}

// Ignore warn: https://youtrack.jetbrains.com/issue/IDEA-296490
processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand(project.properties)
	}
}

loom {
	splitEnvironmentSourceSets()

	accessWidenerPath = file("src/main/resources/partnership.accesswidener")

	mods {
		"partnership" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

fabricApi {
	configureDataGeneration()
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories { }
}

jar {
	from("LICENSE") {
		rename { "${it}_${base.archivesName.get()}"}
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

tasks.withType(KotlinCompile).configureEach {
	kotlinOptions {
		jvmTarget = 17
	}
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}